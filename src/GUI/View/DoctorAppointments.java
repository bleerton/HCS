/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.View;

import BLL.Appointment;
import BLL.Connection;
import BLL.Patient;
import BLL.Request;
import DAL.AppointmentRepository;
import DAL.ConnectionRepository;
import DAL.HealthException;
import DAL.PatientRepository;
import DAL.RequestRepository;
import GUI.Model.RequestTableModel;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Enis
 */
public class DoctorAppointments extends javax.swing.JInternalFrame {

    RequestTableModel rtm = new RequestTableModel();
    RequestRepository rr = new RequestRepository();
    AppointmentRepository ar = new AppointmentRepository();

    private int doctorID_Table;

    public void setDoctorIDTable(int ptd) {
        this.doctorID_Table = ptd;
    }

    public int getDoctorIDTable() {
        return doctorID_Table;
    }

    public DoctorAppointments() {
        initComponents();
    }

    public void loadTable() {
        try {
            List<Request> list = rr.findAll();
            ArrayList<Request> listByID = new ArrayList<>();
            for (Request request : list) {
                if (request.getStatus().equals("Pending") && request.getDoctorID().getDoctorID() == doctorID_Table) {
                    listByID.add(request);
                }
            }
            rtm.addList(listByID);
            table.setModel(rtm);
            rtm.fireTableDataChanged();
        } catch (HealthException ex) {
            JOptionPane.showMessageDialog(this, "Info:" + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        confirmButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        locationText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dateChooser = new datechooser.beans.DateChooserCombo();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        noteText = new javax.swing.JTextArea();
        timeComboBox = new javax.swing.JComboBox<>();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setClosable(true);
        setMaximumSize(new java.awt.Dimension(1079, 809));
        setMinimumSize(new java.awt.Dimension(1079, 809));
        setPreferredSize(new java.awt.Dimension(1079, 809));

        jPanel1.setBackground(new java.awt.Color(250, 250, 250));

        confirmButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        confirmButton.setText("Confirm Request");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        jLabel1.setText("Requested Appointments");

        cancelButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cancelButton.setText("Cancel Request");
        cancelButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Location :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Date :");

        dateChooser.setFieldFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 14));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Note :");

        noteText.setColumns(20);
        noteText.setRows(5);
        jScrollPane1.setViewportView(noteText);

        timeComboBox.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        timeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(locationText, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(120, 120, 120)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(timeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(176, 176, 176)
                                .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(222, 222, 222)
                                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(timeComboBox, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dateChooser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(locationText, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        scrollPane.setBackground(new java.awt.Color(250, 250, 250));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Requester Name", "Assigned To", "Requested in", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPane.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(2).setResizable(false);
            table.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(scrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//    public Date turnDate(String d){
//        System.out.println(d);
//        Date date1 = null;
//        try { 
//            date1=new SimpleDateFormat("yyyy/MM/dd").parse(d);
//        } catch (ParseException ex) {
//            Logger.getLogger(AppointmentTableModel.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        return date1;
//    }
    //me kqyr nese naj textField ose najsen qe duhet mu shkru nga useri a osht e zbrazet
    public boolean anyIsEmpty() {
        if (dateChooser == null) {
            JOptionPane.showMessageDialog(this, "Date chooser is empty !");
            return true;
        } else if (noteText.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Note text is empty!");
            return true;
        } else if (locationText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Note text is empty!");
            return true;
        }
        return false;
    }

    public Date ktheNgaComboBox(Date d) {
        try {
            DateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd");
            String turnedString = dateformat.format(d);
            String  ktheNdate = turnedString +" "+ timeComboBox.getSelectedItem()+":00";
            
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            return df.parse(ktheNdate);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Before you confirm ,Select time and date");
        } catch (ParseException ex) {
            Logger.getLogger(DoctorAppointments.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }   


    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "You didnt select any Request");
        } else {
            Request r = rtm.getRequest(row);
            r.setStatus("Confirmed");
            try {
                rr.edit(r);

                Appointment app = new Appointment();
                app.setFirstNameOfPatient(r.getPatientID().getFirstName());
                app.setLastNameOfPatient(r.getPatientID().getLastName());
                app.setPatientID(r.getPatientID());
                app.setStatus("Confirmed");
                app.setDoctorID(r.getDoctorID());

                ///// Kur confirmohet requesti nga doktorri qatij pacienti i regjistrohet doctorID i doktorrit?(qe osht logged in)
                PatientRepository pr = new PatientRepository();
                ConnectionRepository cr = new ConnectionRepository();
                Patient patientOfThisAppointment = pr.findByID(app.getPatientID().getPatientID());
                pr.edit(patientOfThisAppointment);
                /////
                if (anyIsEmpty()) {
                    return;
                }
                app.setDateTime(ktheNgaComboBox(this.dateChooser.getCurrent().getTime()));
                ktheNgaComboBox(dateChooser.getCurrent().getTime());

                app.setNote(noteText.getText());
                app.setLocation(locationText.getText());

                if (!Appointment.exist(app)) {
                    ar.create(app);
                    rr.delete(r);
                    Connection c = new Connection();
                    c.setDoctorID(app.getDoctorID());
                    c.setPatientID(app.getPatientID());
                    if (!Connection.exist(c)) {
                        cr.create(c);
                    }
                    JOptionPane.showMessageDialog(this, "New Appointment Created");
                } else {
                    JOptionPane.showMessageDialog(this, "U already created an appointment with this ID");
                    rr.delete(r);
                    loadTable();
                    return;
                }
            } catch (HealthException ex) {
                JOptionPane.showMessageDialog(this, "Info:" + ex.getMessage());
            }
        }
        locationText.setText("");
        noteText.setText("");
        dateChooser.setText("");
        loadTable();

    }//GEN-LAST:event_confirmButtonActionPerformed


    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        int row = table.getSelectedRow();
        if (row != -1) {
            Object[] ob = {"Po", "Jo"};
            int i = JOptionPane.showOptionDialog(this, "Are you sure you want to cancel?", "Request Cancel",
                    JOptionPane.OK_OPTION, JOptionPane.QUESTION_MESSAGE, null, ob, ob[1]);
            if (i == 0) {
                Request r = rtm.getRequest(row);
                try {
                    rr.delete(r);
                } catch (HealthException ex) {
                    JOptionPane.showMessageDialog(this, "Info:" + ex.getMessage());
                }
                loadTable();
            } else {
            }
        } else {
            JOptionPane.showMessageDialog(this, "You didnt select anything to delete!");
        }
    }//GEN-LAST:event_cancelButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton confirmButton;
    private datechooser.beans.DateChooserCombo dateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField locationText;
    private javax.swing.JTextArea noteText;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    private javax.swing.JComboBox<String> timeComboBox;
    // End of variables declaration//GEN-END:variables
}
